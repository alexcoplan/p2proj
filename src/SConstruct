import sys

# platform-dependent stuff
on_linux = sys.platform.startswith("linux")
compiler = 'g++' if on_linux else 'clang++'
base_flags = '-std=c++11 -Wall -pedantic'
if on_linux:
  base_flags += ' -fdiagnostics-color'
else:
  base_flags += ' -fcolor-diagnostics'

# set up command line argument to switch between debug/release builds
vars = Variables(None, ARGUMENTS)
vars.Add(EnumVariable('BUILD_TYPE', 'type of build to use', 'debug',
  allowed_values=('debug', 'release')))

env = Environment(variables = vars, CXX=compiler, CPPPATH = ['.','include'])

# configure flags based on debug or release
if env['BUILD_TYPE'] == 'debug':
  print('*** debug build')
  flags = base_flags + ' -g -DDEBUG'
else:
  print('*** release build')
  flags = base_flags + ' -Ofast'

env["CXXFLAGS"] = flags

# separately-compiled files
base_files = ["event.cpp", "chorale.cpp", "xoroshiro.cpp", "random_source.cpp"]

# unit test build
test_names = ["ctx_test", "dist_test", "chorale_test", "rand_test"]
test_files = base_files + ["test/" + f + ".cpp" for f in test_names]
test_build = env.Program(target = 'test/ctx_test.out', source = test_files)

# target build
env.Program(target = 'play/scratch.out', source = base_files + ["play/scratch.cpp"])
env.Program(target = 'play/eval.out', source = base_files + ["play/eval.cpp"])
env.Program(target = 'play/rand.out', source = base_files + ["play/rand.cpp"])

# set up `scons test` command
test_alias = Alias('test', [test_build], test_build[0].path)
AlwaysBuild(test_alias)
